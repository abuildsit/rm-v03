
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  remittance_id: 'remittance_id',
  user_id: 'user_id',
  organization_id: 'organization_id',
  action: 'action',
  outcome: 'outcome',
  timestamp: 'timestamp',
  field_changed: 'field_changed',
  old_value: 'old_value',
  new_value: 'new_value',
  reason: 'reason',
  error_message: 'error_message',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Auth_linksScalarFieldEnum = {
  id: 'id',
  auth_id: 'auth_id',
  profile_id: 'profile_id',
  provider: 'provider',
  provider_user_id: 'provider_user_id',
  created_at: 'created_at'
};

exports.Prisma.Bank_accountsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  xero_account_id: 'xero_account_id',
  xero_name: 'xero_name',
  xero_code: 'xero_code',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  bank_account_number: 'bank_account_number',
  currency_code: 'currency_code',
  enable_payments_to_account: 'enable_payments_to_account'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  invoice_id: 'invoice_id',
  invoice_number: 'invoice_number',
  contact_name: 'contact_name',
  contact_id: 'contact_id',
  invoice_date: 'invoice_date',
  due_date: 'due_date',
  status: 'status',
  line_amount_types: 'line_amount_types',
  sub_total: 'sub_total',
  total_tax: 'total_tax',
  total: 'total',
  amount_due: 'amount_due',
  amount_paid: 'amount_paid',
  amount_credited: 'amount_credited',
  currency_code: 'currency_code',
  reference: 'reference',
  brand_id: 'brand_id',
  has_errors: 'has_errors',
  is_discounted: 'is_discounted',
  has_attachments: 'has_attachments',
  sent_to_contact: 'sent_to_contact',
  last_synced_at: 'last_synced_at',
  xero_updated_date_utc: 'xero_updated_date_utc',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Organization_membersScalarFieldEnum = {
  id: 'id',
  profile_id: 'profile_id',
  organization_id: 'organization_id',
  role: 'role',
  invited_by: 'invited_by',
  joined_at: 'joined_at',
  created_at: 'created_at',
  status: 'status',
  last_updated: 'last_updated'
};

exports.Prisma.OrganizationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subscription_tier: 'subscription_tier',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProfilesScalarFieldEnum = {
  id: 'id',
  email: 'email',
  display_name: 'display_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_accessed_org: 'last_accessed_org'
};

exports.Prisma.Remittance_linesScalarFieldEnum = {
  id: 'id',
  remittance_id: 'remittance_id',
  invoice_number: 'invoice_number',
  ai_paid_amount: 'ai_paid_amount',
  manual_paid_amount: 'manual_paid_amount',
  ai_invoice_id: 'ai_invoice_id',
  override_invoice_id: 'override_invoice_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RemittancesScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  filename: 'filename',
  file_path: 'file_path',
  status: 'status',
  payment_date: 'payment_date',
  total_amount: 'total_amount',
  reference: 'reference',
  confidence_score: 'confidence_score',
  extracted_raw_json: 'extracted_raw_json',
  xero_batch_id: 'xero_batch_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Xero_connectionsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  xero_tenant_id: 'xero_tenant_id',
  tenant_name: 'tenant_name',
  tenant_type: 'tenant_type',
  access_token: 'access_token',
  refresh_token: 'refresh_token',
  expires_at: 'expires_at',
  connection_status: 'connection_status',
  last_error: 'last_error',
  last_refreshed_at: 'last_refreshed_at',
  refresh_attempts: 'refresh_attempts',
  scopes: 'scopes',
  auth_event_id: 'auth_event_id',
  last_sync_at: 'last_sync_at',
  sync_status: 'sync_status',
  sync_error: 'sync_error',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Xero_sync_logsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  object_type: 'object_type',
  sync_type: 'sync_type',
  status: 'status',
  total_records: 'total_records',
  processed_records: 'processed_records',
  successful_records: 'successful_records',
  failed_records: 'failed_records',
  started_at: 'started_at',
  completed_at: 'completed_at',
  duration_seconds: 'duration_seconds',
  sync_parameters: 'sync_parameters',
  modified_since: 'modified_since',
  error_message: 'error_message',
  error_details: 'error_details',
  initiated_by: 'initiated_by',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AuditAction = exports.$Enums.AuditAction = {
  created: 'created',
  updated: 'updated',
  approved: 'approved',
  unapproved: 'unapproved',
  exported: 'exported',
  reconciled: 'reconciled',
  deleted: 'deleted',
  retry: 'retry',
  manual_override: 'manual_override',
  sync_attempt: 'sync_attempt'
};

exports.AuditOutcome = exports.$Enums.AuditOutcome = {
  success: 'success',
  error: 'error',
  rejected: 'rejected',
  pending: 'pending'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  DELETED: 'DELETED',
  AUTHORISED: 'AUTHORISED',
  PAID: 'PAID',
  VOIDED: 'VOIDED'
};

exports.OrganizationRole = exports.$Enums.OrganizationRole = {
  owner: 'owner',
  admin: 'admin',
  user: 'user',
  auditor: 'auditor'
};

exports.MemberStatus = exports.$Enums.MemberStatus = {
  active: 'active',
  invited: 'invited',
  removed: 'removed'
};

exports.RemittanceStatus = exports.$Enums.RemittanceStatus = {
  Uploaded: 'Uploaded',
  Processing: 'Processing',
  Data_Retrieved: 'Data_Retrieved',
  Awaiting_Approval: 'Awaiting_Approval',
  Unmatched: 'Unmatched',
  Partially_Matched: 'Partially_Matched',
  Manual_Review: 'Manual_Review',
  Exporting: 'Exporting',
  Exported_Unreconciled: 'Exported_Unreconciled',
  Reconciled: 'Reconciled',
  Export_Failed: 'Export_Failed',
  File_Error: 'File_Error',
  Cancelled: 'Cancelled',
  Soft_Deleted: 'Soft_Deleted'
};

exports.XeroConnectionStatus = exports.$Enums.XeroConnectionStatus = {
  connected: 'connected',
  expired: 'expired',
  revoked: 'revoked',
  error: 'error',
  disconnected: 'disconnected'
};

exports.XeroSyncStatus = exports.$Enums.XeroSyncStatus = {
  pending: 'pending',
  syncing: 'syncing',
  completed: 'completed',
  failed: 'failed'
};

exports.XeroSyncObjectType = exports.$Enums.XeroSyncObjectType = {
  invoices: 'invoices',
  accounts: 'accounts',
  contacts: 'contacts',
  payments: 'payments',
  organization: 'organization'
};

exports.XeroSyncType = exports.$Enums.XeroSyncType = {
  full: 'full',
  incremental: 'incremental',
  manual: 'manual',
  real_time: 'real_time'
};

exports.XeroSyncLogStatus = exports.$Enums.XeroSyncLogStatus = {
  started: 'started',
  in_progress: 'in_progress',
  completed: 'completed',
  failed: 'failed',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  audit_logs: 'audit_logs',
  auth_links: 'auth_links',
  bank_accounts: 'bank_accounts',
  invoices: 'invoices',
  organization_members: 'organization_members',
  organizations: 'organizations',
  profiles: 'profiles',
  remittance_lines: 'remittance_lines',
  remittances: 'remittances',
  xero_connections: 'xero_connections',
  xero_sync_logs: 'xero_sync_logs'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
