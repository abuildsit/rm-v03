generator client {
  provider                    = "prisma-client-py"
  recursive_type_depth        = 5
  enable_experimental_decimal = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum AuditAction {
  created
  updated
  approved
  unapproved
  exported
  reconciled
  deleted
  retry
  manual_override
  sync_attempt
}

enum AuditOutcome {
  success
  error
  rejected
  pending
}

enum InvoiceStatus {
  DRAFT
  SUBMITTED
  DELETED
  AUTHORISED
  PAID
  VOIDED
}

enum OrganizationRole {
  owner
  admin
  user
  auditor
}

enum MemberStatus {
  active
  invited
  removed
}

enum RemittanceStatus {
  Uploaded
  Processing
  Data_Retrieved
  Awaiting_Approval
  Unmatched
  Partially_Matched
  Manual_Review
  Exporting
  Exported_Unreconciled
  Reconciled
  Export_Failed
  File_Error
  Cancelled
  Soft_Deleted
}

enum XeroConnectionStatus {
  connected
  expired
  revoked
  error
  disconnected
}

enum XeroSyncStatus {
  pending
  syncing
  completed
  failed
}

enum XeroSyncObjectType {
  invoices
  accounts
  contacts
  payments
  organization
}

enum XeroSyncLogStatus {
  started
  in_progress
  completed
  failed
  cancelled
}

enum XeroSyncType {
  full
  incremental
  manual
  real_time
}

// ===== MODELS =====
model audit_logs {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  remittance_id   String            @db.Uuid
  user_id         String?           @db.Uuid
  organization_id String            @db.Uuid
  action          AuditAction
  outcome         AuditOutcome
  timestamp       DateTime?         @default(now()) @db.Timestamptz(6)
  field_changed   String?
  old_value       String?
  new_value       String?
  reason          String?
  error_message   String?
  metadata        Json?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  organizations   organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  remittances     remittances       @relation(fields: [remittance_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([action], map: "idx_audit_logs_action")
  @@index([organization_id], map: "idx_audit_logs_organization_id")
  @@index([outcome], map: "idx_audit_logs_outcome")
  @@index([remittance_id], map: "idx_audit_logs_remittance_id")
  @@index([remittance_id, timestamp], map: "idx_audit_logs_remittance_timestamp")
  @@index([timestamp], map: "idx_audit_logs_timestamp")
  @@index([user_id], map: "idx_audit_logs_user_id")
}

model auth_links {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_id          String?   @db.Uuid
  profile_id       String?   @db.Uuid
  provider         String
  provider_user_id String?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  profiles         profiles? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_user_id])
}

model bank_accounts {
  id                         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id            String        @db.Uuid
  xero_account_id            String
  xero_name                  String?
  xero_code                  String?
  is_default                 Boolean?      @default(false)
  created_at                 DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime      @updatedAt @db.Timestamptz(6)
  bank_account_number        String?
  currency_code              String?       @default("AUD")
  enable_payments_to_account Boolean?      @default(false)
  organizations              organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organization_id, xero_account_id])
  @@index([organization_id], map: "idx_bank_accounts_organization_id")
}

model invoices {
  id                        String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id           String                   @db.Uuid
  invoice_id                String
  invoice_number            String?
  contact_name              String?
  contact_id                String?
  invoice_date              DateTime?                @db.Date
  due_date                  DateTime?                @db.Date
  status                    InvoiceStatus?
  line_amount_types         String?
  sub_total                 Decimal?                 @db.Decimal(15, 2)
  total_tax                 Decimal?                 @db.Decimal(15, 2)
  total                     Decimal?                 @db.Decimal(15, 2)
  amount_due                Decimal?                 @db.Decimal(15, 2)
  amount_paid               Decimal?                 @db.Decimal(15, 2)
  amount_credited           Decimal?                 @db.Decimal(15, 2)
  currency_code             String?                  @default("USD")
  reference                 String?
  brand_id                  String?
  has_errors                Boolean?                 @default(false)
  is_discounted             Boolean?                 @default(false)
  has_attachments           Boolean?                 @default(false)
  sent_to_contact           Boolean?                 @default(false)
  last_synced_at            DateTime?                @default(now()) @db.Timestamptz(6)
  xero_updated_date_utc     DateTime?                @db.Timestamptz(6)
  created_at                DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                @default(now()) @db.Timestamptz(6)
  organizations             organizations            @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  remittance_lines_ai       remittance_lines[]       @relation("remittance_lines_ai_invoice_idToinvoices")
  remittance_lines_override remittance_lines[]       @relation("remittance_lines_override_invoice_idToinvoices")

  @@unique([organization_id, invoice_id])
  @@index([organization_id], map: "idx_invoices_organization_id")
}

model organization_members {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profile_id      String?          @db.Uuid
  organization_id String?          @db.Uuid
  role            OrganizationRole @default(user)
  invited_by      String?          @db.Uuid
  joined_at       DateTime?        @default(now()) @db.Timestamptz(6)
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  status          MemberStatus     @default(active)
  last_updated    DateTime?        @default(now()) @db.Timestamptz(6)
  
  profiles_invited_by    profiles?      @relation("organization_members_invited_byToprofiles", fields: [invited_by], references: [id], onUpdate: NoAction)
  organizations          organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles_member        profiles?      @relation("organization_members_profile_idToprofiles", fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profile_id, organization_id])
  @@index([profile_id], map: "idx_organization_members_profile_id")
  @@index([profile_id, organization_id], map: "idx_organization_members_profile_org")
}

model organizations {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  subscription_tier    String?                @default("basic")
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  audit_logs           audit_logs[]
  bank_accounts        bank_accounts[]
  invoices             invoices[]
  organization_members organization_members[]
  profiles             profiles[]
  remittances          remittances[]
  xero_connections     xero_connections?
  xero_sync_logs       xero_sync_logs[]
}

model profiles {
  id                        String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                     String                 @unique
  display_name              String?
  created_at                DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?              @default(now()) @db.Timestamptz(6)
  last_accessed_org         String?                @db.Uuid
  auth_links                auth_links[]
  organization_members_invited_by organization_members[] @relation("organization_members_invited_byToprofiles")
  organization_members_member     organization_members[] @relation("organization_members_profile_idToprofiles")
  organizations             organizations?         @relation(fields: [last_accessed_org], references: [id], onUpdate: NoAction)
  xero_connections          xero_connections[]
  xero_sync_logs            xero_sync_logs[]
}

model remittance_lines {
  id                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  remittance_id           String      @db.Uuid
  invoice_number          String
  ai_paid_amount          Decimal?    @db.Decimal(15, 2)
  manual_paid_amount      Decimal?    @db.Decimal(15, 2)
  ai_invoice_id           String?     @db.Uuid
  override_invoice_id     String?     @db.Uuid
  created_at              DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?   @default(now()) @db.Timestamptz(6)
  invoices_ai             invoices?   @relation("remittance_lines_ai_invoice_idToinvoices", fields: [ai_invoice_id], references: [id], onUpdate: NoAction)
  invoices_override       invoices?   @relation("remittance_lines_override_invoice_idToinvoices", fields: [override_invoice_id], references: [id], onUpdate: NoAction)
  remittances             remittances @relation(fields: [remittance_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model remittances {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id    String            @db.Uuid
  filename           String
  file_path          String?
  status             RemittanceStatus
  payment_date       DateTime?         @db.Date
  total_amount       Decimal?          @db.Decimal(15, 2)
  reference          String?
  confidence_score   Decimal?          @db.Decimal(3, 2)
  extracted_raw_json Json?
  xero_batch_id      String?
  created_at         DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @default(now()) @db.Timestamptz(6)
  audit_logs         audit_logs[]
  remittance_lines   remittance_lines[]
  organizations      organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_remittances_created_at")
  @@index([organization_id], map: "idx_remittances_organization_id")
  @@index([status, organization_id], map: "idx_remittances_status_org")
}

model xero_connections {
  id                String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id   String                 @unique @db.Uuid
  xero_tenant_id    String                 @unique
  tenant_name       String?
  tenant_type       String?                @default("ORGANISATION")
  access_token      String
  refresh_token     String
  expires_at        DateTime               @db.Timestamptz(6)
  connection_status XeroConnectionStatus   @default(connected)
  last_error        String?
  last_refreshed_at DateTime?              @default(now()) @db.Timestamptz(6)
  refresh_attempts  Int?                   @default(0)
  scopes            Json?                  @default("[]")
  auth_event_id     String?
  last_sync_at      DateTime?              @db.Timestamptz(6)
  sync_status       XeroSyncStatus         @default(pending)
  sync_error        String?
  created_by        String?                @db.Uuid
  created_at        DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?              @default(now()) @db.Timestamptz(6)
  profiles          profiles?              @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations     organizations          @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([organization_id, connection_status], map: "idx_xero_connections_org_status")
  @@index([organization_id], map: "idx_xero_connections_organization_id")
  @@index([connection_status], map: "idx_xero_connections_status")
  @@index([xero_tenant_id], map: "idx_xero_connections_tenant_id")
  @@index([expires_at], map: "idx_xero_connections_expires_at")
  @@index([refresh_attempts, last_refreshed_at], map: "idx_xero_connections_refresh_attempts")
}

model xero_sync_logs {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id    String              @db.Uuid
  object_type        XeroSyncObjectType
  sync_type          XeroSyncType
  status             XeroSyncLogStatus
  total_records      Int?                @default(0)
  processed_records  Int?                @default(0)
  successful_records Int?                @default(0)
  failed_records     Int?                @default(0)
  started_at         DateTime?           @default(now()) @db.Timestamptz(6)
  completed_at       DateTime?           @db.Timestamptz(6)
  duration_seconds   Decimal?            @db.Decimal(10, 3)
  sync_parameters    Json?               @default("{}")
  modified_since     DateTime?           @db.Timestamptz(6)
  error_message      String?
  error_details      Json?
  initiated_by       String?             @db.Uuid
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  profiles           profiles?           @relation(fields: [initiated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations      organizations       @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([object_type], map: "idx_xero_sync_logs_object_type")
  @@index([organization_id], map: "idx_xero_sync_logs_organization_id")
  @@index([organization_id, object_type, started_at(sort: Desc)], map: "idx_xero_sync_logs_recent")
  @@index([started_at(sort: Desc)], map: "idx_xero_sync_logs_started_at")
  @@index([status], map: "idx_xero_sync_logs_status")
}