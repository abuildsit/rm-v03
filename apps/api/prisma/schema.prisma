generator client {
  provider                    = "prisma-client-py"
  recursive_type_depth        = 5
  enable_experimental_decimal = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum AuditAction {
  created
  updated
  approved
  unapproved
  exported
  reconciled
  deleted
  retry
  manual_override
  sync_attempt
}

enum AuditOutcome {
  success
  error
  rejected
  pending
}

enum InvoiceStatus {
  DRAFT
  SUBMITTED
  DELETED
  AUTHORISED
  PAID
  VOIDED
}

enum OrganizationRole {
  owner
  admin
  user
  auditor
}

enum MemberStatus {
  active
  invited
  removed
}

enum RemittanceStatus {
  Uploaded
  Processing
  Data_Retrieved
  Awaiting_Approval
  Unmatched
  Partially_Matched
  Manual_Review
  Exporting
  Exported_Unreconciled
  Reconciled
  Export_Failed
  File_Error
  Cancelled
  Soft_Deleted
}

enum XeroConnectionStatus {
  connected
  expired
  revoked
  error
  disconnected
}

enum XeroSyncStatus {
  pending
  syncing
  completed
  failed
}

enum XeroSyncObjectType {
  invoices
  accounts
  contacts
  payments
  organization
}

enum XeroSyncLogStatus {
  started
  in_progress
  completed
  failed
  cancelled
}

enum XeroSyncType {
  full
  incremental
  manual
  real_time
}

// ===== MODELS =====
model AuditLog {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  remittanceId   String       @db.Uuid
  userId         String?      @db.Uuid
  organizationId String       @db.Uuid
  action         AuditAction
  outcome        AuditOutcome
  timestamp      DateTime?    @default(now()) @db.Timestamptz(6)
  fieldChanged   String?
  oldValue       String?
  newValue       String?
  reason         String?
  errorMessage   String?
  metadata       Json?
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  remittance     Remittance   @relation(fields: [remittanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([action], map: "idx_audit_logs_action")
  @@index([organizationId], map: "idx_audit_logs_organization_id")
  @@index([outcome], map: "idx_audit_logs_outcome")
  @@index([remittanceId], map: "idx_audit_logs_remittance_id")
  @@index([remittanceId, timestamp], map: "idx_audit_logs_remittance_timestamp")
  @@index([timestamp], map: "idx_audit_logs_timestamp")
  @@index([userId], map: "idx_audit_logs_user_id")
}

model AuthLink {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authId         String?   @db.Uuid
  profileId      String?   @db.Uuid
  provider       String
  providerUserId String?
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  profile        Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerUserId])
}

model BankAccount {
  id                      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId          String       @db.Uuid
  xeroAccountId           String
  xeroName                String?
  xeroCode                String?
  type                    String?      @default("BANK")
  status                  String?      @default("ACTIVE")
  isDefault               Boolean?     @default(false)
  createdAt               DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime     @updatedAt @db.Timestamptz(6)
  bankAccountNumber       String?
  currencyCode            String?      @default("AUD")
  enablePaymentsToAccount Boolean?     @default(false)
  organization            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organizationId, xeroAccountId])
  @@index([organizationId], map: "idx_bank_accounts_organization_id")
}

model Invoice {
  id                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId          String           @db.Uuid
  invoiceId               String
  invoiceNumber           String?
  contactName             String?
  contactId               String?
  invoiceDate             DateTime?        @db.Date
  dueDate                 DateTime?        @db.Date
  status                  InvoiceStatus?
  lineAmountTypes         String?
  subTotal                Decimal?         @db.Decimal(15, 2)
  totalTax                Decimal?         @db.Decimal(15, 2)
  total                   Decimal?         @db.Decimal(15, 2)
  amountDue               Decimal?         @db.Decimal(15, 2)
  amountPaid              Decimal?         @db.Decimal(15, 2)
  amountCredited          Decimal?         @db.Decimal(15, 2)
  currencyCode            String?          @default("USD")
  reference               String?
  brandId                 String?
  hasErrors               Boolean?         @default(false)
  isDiscounted            Boolean?         @default(false)
  hasAttachments          Boolean?         @default(false)
  sentToContact           Boolean?         @default(false)
  lastSyncedAt            DateTime?        @default(now()) @db.Timestamptz(6)
  xeroUpdatedDateUtc      DateTime?        @db.Timestamptz(6)
  createdAt               DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime?        @default(now()) @db.Timestamptz(6)
  organization            Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  remittanceLinesAi       RemittanceLine[] @relation("RemittanceLineAiInvoice")
  remittanceLinesOverride RemittanceLine[] @relation("RemittanceLineOverrideInvoice")

  @@unique([organizationId, invoiceId])
  @@index([organizationId], map: "idx_invoices_organization_id")
}

model OrganizationMember {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId      String?          @db.Uuid
  organizationId String?          @db.Uuid
  role           OrganizationRole @default(user)
  invitedBy      String?          @db.Uuid
  joinedAt       DateTime?        @default(now()) @db.Timestamptz(6)
  createdAt      DateTime?        @default(now()) @db.Timestamptz(6)
  status         MemberStatus     @default(active)
  lastUpdated    DateTime?        @default(now()) @db.Timestamptz(6)

  invitedByProfile Profile?      @relation("OrganizationMemberInvitedBy", fields: [invitedBy], references: [id], onUpdate: NoAction)
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile          Profile?      @relation("OrganizationMemberProfile", fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profileId, organizationId])
  @@index([profileId], map: "idx_organization_members_profile_id")
  @@index([profileId, organizationId], map: "idx_organization_members_profile_org")
}

model Organization {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  subscriptionTier String?              @default("basic")
  createdAt        DateTime?            @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?            @default(now()) @db.Timestamptz(6)
  auditLogs        AuditLog[]
  bankAccounts     BankAccount[]
  invoices         Invoice[]
  members          OrganizationMember[]
  profiles         Profile[]
  remittances      Remittance[]
  xeroConnection   XeroConnection?
  xeroSyncLogs     XeroSyncLog[]
}

model Profile {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String               @unique
  displayName       String?
  createdAt         DateTime?            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?            @default(now()) @db.Timestamptz(6)
  lastAccessedOrgId String?              @db.Uuid
  authLinks         AuthLink[]
  invitedMembers    OrganizationMember[] @relation("OrganizationMemberInvitedBy")
  memberships       OrganizationMember[] @relation("OrganizationMemberProfile")
  lastAccessedOrg   Organization?        @relation(fields: [lastAccessedOrgId], references: [id], onUpdate: NoAction)
  xeroConnections   XeroConnection[]
  xeroSyncLogs      XeroSyncLog[]
}

model RemittanceLine {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  remittanceId      String     @db.Uuid
  invoiceNumber     String
  aiPaidAmount      Decimal?   @db.Decimal(15, 2)
  manualPaidAmount  Decimal?   @db.Decimal(15, 2)
  aiInvoiceId       String?    @db.Uuid
  overrideInvoiceId String?    @db.Uuid
  matchConfidence   Decimal?   @db.Decimal(3, 2)
  matchType         String?
  notes             String?
  createdAt         DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?  @default(now()) @db.Timestamptz(6)
  aiInvoice         Invoice?   @relation("RemittanceLineAiInvoice", fields: [aiInvoiceId], references: [id], onUpdate: NoAction)
  overrideInvoice   Invoice?   @relation("RemittanceLineOverrideInvoice", fields: [overrideInvoiceId], references: [id], onUpdate: NoAction)
  remittance        Remittance @relation(fields: [remittanceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Remittance {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String           @db.Uuid
  filename         String
  filePath         String?
  status           RemittanceStatus
  paymentDate      DateTime?        @db.Date
  totalAmount      Decimal?         @db.Decimal(15, 2)
  reference        String?
  confidenceScore  Decimal?         @db.Decimal(3, 2)
  extractedRawJson Json?
  openaiThreadId   String?
  xeroBatchId      String?
  createdAt        DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?        @default(now()) @db.Timestamptz(6)
  auditLogs        AuditLog[]
  lines            RemittanceLine[]
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_remittances_created_at")
  @@index([organizationId], map: "idx_remittances_organization_id")
  @@index([status, organizationId], map: "idx_remittances_status_org")
  @@index([openaiThreadId], map: "idx_remittances_openai_thread")
}

model XeroConnection {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String               @unique @db.Uuid
  xeroTenantId     String               @unique
  tenantName       String?
  tenantType       String?              @default("ORGANISATION")
  accessToken      String
  refreshToken     String
  expiresAt        DateTime             @db.Timestamptz(6)
  connectionStatus XeroConnectionStatus @default(connected)
  lastError        String?
  lastRefreshedAt  DateTime?            @default(now()) @db.Timestamptz(6)
  refreshAttempts  Int?                 @default(0)
  scopes           Json?                @default("[]")
  authEventId      String?
  lastSyncAt       DateTime?            @db.Timestamptz(6)
  syncStatus       XeroSyncStatus       @default(pending)
  syncError        String?
  createdBy        String?              @db.Uuid
  createdAt        DateTime?            @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?            @default(now()) @db.Timestamptz(6)
  creator          Profile?             @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization     Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([organizationId, connectionStatus], map: "idx_xero_connections_org_status")
  @@index([organizationId], map: "idx_xero_connections_organization_id")
  @@index([connectionStatus], map: "idx_xero_connections_status")
  @@index([xeroTenantId], map: "idx_xero_connections_tenant_id")
  @@index([expiresAt], map: "idx_xero_connections_expires_at")
  @@index([refreshAttempts, lastRefreshedAt], map: "idx_xero_connections_refresh_attempts")
}

model XeroSyncLog {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId    String             @db.Uuid
  objectType        XeroSyncObjectType
  syncType          XeroSyncType
  status            XeroSyncLogStatus
  totalRecords      Int?               @default(0)
  processedRecords  Int?               @default(0)
  successfulRecords Int?               @default(0)
  failedRecords     Int?               @default(0)
  startedAt         DateTime?          @default(now()) @db.Timestamptz(6)
  completedAt       DateTime?          @db.Timestamptz(6)
  durationSeconds   Decimal?           @db.Decimal(10, 3)
  syncParameters    Json?              @default("{}")
  modifiedSince     DateTime?          @db.Timestamptz(6)
  errorMessage      String?
  errorDetails      Json?
  initiatedBy       String?            @db.Uuid
  createdAt         DateTime?          @default(now()) @db.Timestamptz(6)
  initiator         Profile?           @relation(fields: [initiatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([objectType], map: "idx_xero_sync_logs_object_type")
  @@index([organizationId], map: "idx_xero_sync_logs_organization_id")
  @@index([organizationId, objectType, startedAt(sort: Desc)], map: "idx_xero_sync_logs_recent")
  @@index([startedAt(sort: Desc)], map: "idx_xero_sync_logs_started_at")
  @@index([status], map: "idx_xero_sync_logs_status")
}
